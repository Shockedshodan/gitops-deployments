apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-1"
  name: local-path-storage
---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  labels:
    create-ca-bundle: "true"
  name: vault
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  name: local-path
provisioner: rancher.io/local-path
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-1"
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  name: local-path-provisioner-role
  namespace: local-path-storage
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  name: local-path-provisioner-role
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - persistentvolumeclaims
  - configmaps
  - pods
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  name: local-path-provisioner-bind
  namespace: local-path-storage
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: local-path-provisioner-role
subjects:
- kind: ServiceAccount
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  name: local-path-provisioner-bind
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: local-path-provisioner-role
subjects:
- kind: ServiceAccount
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: v1
data:
  config.json: |-
    {
            "nodePathMap":[
            {
                    "node":"DEFAULT_PATH_FOR_NON_LISTED_NODES",
                    "paths":["/opt/local-path-provisioner"]
            }
            ]
    }
  helperPod.yaml: |-
    apiVersion: v1
    kind: Pod
    metadata:
      name: helper-pod
    spec:
      priorityClassName: system-node-critical
      tolerations:
        - key: node.kubernetes.io/disk-pressure
          operator: Exists
          effect: NoSchedule
      containers:
      - name: helper-pod
        image: busybox
        imagePullPolicy: IfNotPresent
  setup: |-
    #!/bin/sh
    set -eu
    mkdir -m 0777 -p "$VOL_DIR"
  teardown: |-
    #!/bin/sh
    set -eu
    rm -rf "$VOL_DIR"
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  name: local-path-config
  namespace: local-path-storage
---
apiVersion: v1
data:
  kes-policy.hcl: |
    path "kv/data/minio-tenant/*" {
      capabilities = [ "create", "read" ]
    }
    path "kv/metadata/minio-tenant/*" {
      capabilities = [ "list", "delete" ]
    }
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  name: kes-policy
  namespace: vault
---
apiVersion: v1
data: {}
kind: Secret
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
    replicator.v1.mittwald.de/replicate-from: minio-tenant/minio-kes-secret
  name: minio-kes-secret
  namespace: vault
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  name: local-path-provisioner
  namespace: local-path-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: local-path-provisioner
  template:
    metadata:
      labels:
        app: local-path-provisioner
    spec:
      containers:
      - command:
        - local-path-provisioner
        - --debug
        - start
        - --config
        - /etc/config/config.json
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: rancher/local-path-provisioner:v0.0.26
        imagePullPolicy: IfNotPresent
        name: local-path-provisioner
        volumeMounts:
        - mountPath: /etc/config/
          name: config-volume
      serviceAccountName: local-path-provisioner-service-account
      volumes:
      - configMap:
          name: local-path-config
        name: config-volume
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-9"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: cert-manager
  namespace: argocd
spec:
  destination:
    namespace: cert-manager
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: cert-manager
    helm:
      parameters:
      - forceString: true
        name: installCRDs
        value: "true"
      values: |-
        cert-manager:
          installCRDs: true
    repoURL: https://charts.jetstack.io
    targetRevision: v1.14.5
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: gatekeeper
  namespace: argocd
spec:
  destination:
    namespace: gatekeeper-system
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: gatekeeper
    helm:
      values: |
        postInstall:
          labelNamespace:
            extraRules:
            - apiGroups:
              - management.cattle.io
              resources:
              - projects
              verbs:
              - updatepsa
    repoURL: https://open-policy-agent.github.io/gatekeeper/charts
    targetRevision: 3.15.1
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: gatekeeper-policy-manager
  namespace: argocd
spec:
  destination:
    namespace: gatekeeper-system
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: gatekeeper-policy-manager
    helm:
      valuesObject:
        config:
          secretKey: supersecuresecretkey
        ingress:
          enabled: true
          hosts:
          - host: gpm.integration
            pathType: Prefix
            paths:
            - /
          ingressClassName: nginx
    repoURL: https://sighupio.github.io/gatekeeper-policy-manager
    targetRevision: 0.10.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: jena-fuseki
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: jena-fuseki
    helm:
      valuesObject:
        ingressHostName: jena-fuseki.integration
    repoURL: https://glaciation-heu.github.io/jena-fuseki/helm-charts/
    targetRevision: 1.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: longhorn
  namespace: argocd
spec:
  destination:
    namespace: longhorn-system
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: longhorn
    helm:
      values: |
        preUpgradeChecker:
          jobEnabled: false
    repoURL: https://charts.longhorn.io/
    targetRevision: v1.6.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: nginx
  namespace: argocd
spec:
  destination:
    namespace: default
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: nginx-ingress
    helm:
      valuesObject:
        controller:
          config:
            entries:
              external-status-address: 10.1.14.160
          kind: deployment
          nodeSelector:
            master: "true"
          service:
            httpPort:
              enable: true
              nodePort: 31080
              port: 80
              targetPort: 80
            httpsPort:
              enable: true
              nodePort: 31443
              port: 443
              targetPort: 443
            type: NodePort
          tolerations:
          - effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Equal
    repoURL: ghcr.io/nginxinc/charts
    targetRevision: 1.1.3
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-9"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: replicator
  namespace: argocd
spec:
  destination:
    namespace: replicator
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: kubernetes-replicator
    repoURL: https://helm.mittwald.de
    targetRevision: 2.9.2
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-9"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: trust-manager
  namespace: argocd
spec:
  destination:
    namespace: cert-manager
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: trust-manager
    helm:
      valuesObject:
        podDisruptionBudget:
          enabled: true
        replicaCount: 2
        secretTargets:
          authorizedSecrets:
          - ca-bundle
          enabled: true
    repoURL: https://charts.jetstack.io
    targetRevision: v0.9.2
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true
    argocd.argoproj.io/sync-wave: "-1"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: vault
  namespace: argocd
spec:
  destination:
    namespace: vault
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: vault
    helm:
      valuesObject:
        global:
          enabled: true
          tlsDisable: false
        injector:
          enabled: false
        server:
          affinity: ""
          auditStorage:
            enabled: true
            size: 10Gi
            storageClass: local-path
          dataStorage:
            enabled: true
            size: 10Gi
            storageClass: local-path
          enabled: true
          extraEnvironmentVars:
            VAULT_CACERT: /vault/userconfig/vault-tls/ca.crt
            VAULT_TLSCERT: /vault/userconfig/vault-tls/tls.crt
            VAULT_TLSKEY: /vault/userconfig/vault-tls/tls.key
          ha:
            enabled: true
            raft:
              config: |
                disable_mlock = true
                ui = true

                listener "tcp" {
                  address = "[::]:8200"
                  cluster_address = "[::]:8201"
                  tls_cert_file = "/vault/userconfig/vault-tls/tls.crt"
                  tls_key_file  = "/vault/userconfig/vault-tls/tls.key"
                  tls_client_ca_file = "/vault/userconfig/vault-tls/ca.crt"
                }

                storage "raft" {
                  path = "/vault/data"
                }

                service_registration "kubernetes" {}
              enabled: true
              setNodeId: true
            replicas: 3
          ingress:
            activeService: false
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: HTTPS
            enabled: true
            hosts:
            - host: vault.integration
            ingressClassName: nginx
          resources:
            limits:
              cpu: 250m
              memory: 256Mi
            requests:
              cpu: 250m
              memory: 256Mi
          service:
            active:
              enabled: false
            enabled: true
            standby:
              enabled: false
          standalone:
            enabled: false
          ui:
            enabled: true
          volumeMounts:
          - mountPath: /vault/userconfig/vault-tls
            name: userconfig-vault-tls
            readOnly: true
          volumes:
          - name: userconfig-vault-tls
            secret:
              defaultMode: 420
              secretName: vault-tls
    repoURL: https://helm.releases.hashicorp.com
    targetRevision: 0.28.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=true
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-9"
  name: my-selfsigned-ca
  namespace: cert-manager
spec:
  commonName: my-selfsigned-ca
  isCA: true
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: selfsigned-issuer
  privateKey:
    algorithm: ECDSA
    size: 256
  secretName: root-secret
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-1"
  name: vault-certificate
  namespace: vault
spec:
  commonName: system:node:*.vault.svc.cluster.local
  dnsNames:
  - '*.vault-internal'
  - '*.vault-internal.vault.svc.cluster.local'
  - '*.vault'
  - vault-internal.vault.svc.cluster.local
  duration: 2160h
  ipAddresses:
  - 127.0.0.1
  - 192.168.49.2
  isCA: false
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: private-ca-issuer
  privateKey:
    algorithm: RSA
    size: 2048
  renewBefore: 360h
  secretName: vault-tls
  subject:
    organizations:
    - system:nodes
  usages:
  - digital signature
  - key encipherment
  - data encipherment
  - server auth
  - client auth
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-9"
  name: private-ca-issuer
spec:
  ca:
    secretName: root-secret
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-9"
  name: selfsigned-issuer
spec:
  selfSigned: {}
---
apiVersion: trust.cert-manager.io/v1alpha1
kind: Bundle
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-9"
  name: ca-bundle
spec:
  sources:
  - useDefaultCAs: true
  - configMap:
      key: ca.crt
      name: kube-root-ca.crt
  - secret:
      key: ca.crt
      name: root-secret
  target:
    additionalFormats:
      jks:
        key: ca.jks
    configMap:
      key: ca.crt
    namespaceSelector:
      matchLabels:
        create-ca-bundle: "true"
    secret:
      key: ca.crt
